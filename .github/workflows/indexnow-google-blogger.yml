name: IndexNow + Google Indexing (GitHub Pages + Blogger)

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  index_and_notify:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build URL list from changed GitHub Pages HTML files
        env:
          DOMAIN: aymansalem.github.io
        run: |
          echo "Building URL list from changed HTML files..."
          if [ "${{ github.event.before }}" = "0000000000000000000000000000000000000000" ]; then
            FILES=$(git ls-files)
          else
            FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          fi
          URLS=()
          while IFS= read -r f; do
            case "$f" in
              *.html|*.htm)
                URLS+=("https://${DOMAIN}/${f}")
                ;;
            esac
          done < <(printf "%s\n" "$FILES")
          printf "%s\n" "${URLS[@]}" > urls.txt
          echo "Initial urls.txt contents:"
          cat urls.txt || true

      - name: Append Blogger URLs from sitemap
        run: |
          BLOGGER_SITEMAP="https://4-hoteliers.blogspot.com/sitemap.xml"
          echo "Fetching Blogger sitemap..."
          curl -s "$BLOGGER_SITEMAP" | grep -oP '(?<=<loc>).*?(?=</loc>)' >> urls.txt || true
          sed -i '/^\s*$/d' urls.txt || true
          sort -u urls.txt -o urls.txt || true
          echo "Final urls.txt contents:"
          cat urls.txt || true

      - name: Submit URLs to Bing IndexNow (only hosts with public key file)
        env:
          INDEXNOW_KEY: ${{ secrets.INDEXNOW_KEY }}
        run: |
          if [ ! -s urls.txt ]; then
            echo "No URLs to submit to Bing IndexNow. Skipping."
            exit 0
          fi
          
          cat > submit_indexnow.py << 'EOF'
          import os
          import json
          import urllib.request
          from urllib.parse import urlparse
          from collections import defaultdict
          
          key = os.environ.get('INDEXNOW_KEY')
          if not key:
              print("INDEXNOW_KEY not set; skipping IndexNow submission.")
              exit(0)
          
          key_files = {
              'aymansalem.github.io': f'https://aymansalem.github.io/{key}.txt',
              '4-hoteliers.blogspot.com': None
          }
          
          urls_by_host = defaultdict(list)
          with open('urls.txt') as f:
              for url in f:
                  url = url.strip()
                  if url:
                      host = urlparse(url).netloc
                      urls_by_host[host].append(url)
          
          for host, urls in urls_by_host.items():
              payload = {
                  'host': host,
                  'key': key,
                  'urlList': urls
              }
              if key_files.get(host):
                  payload['keyLocation'] = key_files[host]
              data = json.dumps(payload).encode('utf-8')
              req = urllib.request.Request(
                  'https://www.bing.com/indexnow',
                  data=data,
                  headers={'Content-Type': 'application/json'}
              )
              try:
                  with urllib.request.urlopen(req) as resp:
                      print(f'Host: {host} -> Response:', resp.status, resp.read().decode('utf-8'))
              except Exception as e:
                  print(f'Error submitting to IndexNow for host {host}: {e}')
          EOF
          
          python3 submit_indexnow.py

      - name: Submit URLs to Google Indexing API
        env:
          GOOGLE_JSON: ${{ secrets.GOOGLE_JSON }}
        run: |
          if [ ! -s urls.txt ]; then
            echo "No URLs to submit to Google Indexing API. Skipping."
            exit 0
          fi
          
          # Check if GOOGLE_JSON secret is set
          if [ -z "$GOOGLE_JSON" ]; then
            echo "GOOGLE_JSON secret is not set. Skipping Google Indexing API submission."
            exit 0
          fi
          
          # Check if GOOGLE_JSON is valid JSON
          echo "$GOOGLE_JSON" > /tmp/google_key.json
          if ! python3 -c "import json; json.loads(open('/tmp/google_key.json').read())" 2>/dev/null; then
            echo "GOOGLE_JSON is not valid JSON. Skipping Google Indexing API submission."
            exit 0
          fi
          
          python3 -m pip install --upgrade --quiet google-api-python-client google-auth
          
          cat > submit_google.py << 'EOF'
          import json
          import time
          from google.oauth2 import service_account
          from googleapiclient.discovery import build
          
          creds_file = "/tmp/google_key.json"
          SCOPES = ["https://www.googleapis.com/auth/indexing"]
          
          try:
              creds = service_account.Credentials.from_service_account_file(creds_file, scopes=SCOPES)
              service = build("indexing", "v3", credentials=creds, cache_discovery=False)
          except Exception as e:
              print("Failed to initialize Google API client:", e)
              exit(1)
          
          with open("urls.txt") as f:
              urls = [u.strip() for u in f if u.strip()]
          
          for url in urls:
              try:
                  response = service.urlNotifications().publish(body={"url": url, "type": "URL_UPDATED"}).execute()
                  print(f"Google indexing updated for: {url} -> {response}")
              except Exception as e:
                  print(f"Google API error for {url}: {e}")
              time.sleep(1)
          EOF
          
          python3 submit_google.py
